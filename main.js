(()=>{"use strict";document.querySelector(".popup-edit"),document.querySelector(".popup-add"),document.querySelector(".popup-photo");var e=document.querySelector(".edit-form"),t=document.querySelector(".add-form"),n=document.querySelector(".update-avatar-form"),r=document.querySelector(".popup__item_el_title"),o=document.querySelector(".popup__item_el_subtitle"),i=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),c=document.querySelector(".profile__edit-avatar"),u=document.querySelector(".places"),s={inputElement:".popup__item",submitButtonSelector:".popup__button_type_save",inactiveButtonClass:"popup__button_type_disabled",inputErrorClass:"popup__item_type_wrong",spanErrorClass:"popup__span-error_active"};function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(t.inputElement)),this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._spanErrorClass=t.spanErrorClass}var t,n;return t=e,(n=[{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_showError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.classList.add(this._spanErrorClass),t.textContent=e.validationMessage}},{key:"_hideError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._spanErrorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideError(e):this._showError(e)}},{key:"_toggleButton",value:function(){var e=this._formElement.querySelector(this._submitButtonSelector);this._hasInvalidInput()?(e.classList.add(this._inactiveButtonClass),e.setAttribute("disabled","disabled")):(e.classList.remove(this._inactiveButtonClass),e.removeAttribute("disabled"))}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(t){e._checkInputValidity(t.target),e._toggleButton(t.target)}))}))}},{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"resetValidation",value:function(){var e=this;this._toggleButton(),this._inputList.forEach((function(t){e._hideError(t)}))}}])&&l(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n){var r=t.card,o=t.handleCardClick,i=t.handleLikeClick,a=t.handleDeleteClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=r.name,this._link=r.link,this._likes=r.likes,this._handleCardClick=o,this._handleLikeClick=i,this._handleDeleteClick=a,this._templateSelector=n,this._ownerId=r.owner._id,this.id=r._id}var t,n;return t=e,(n=[{key:"_getCardElement",value:function(){var e=document.querySelector(this._templateSelector).content.querySelector(".place").cloneNode(!0);this._cardElement=e}},{key:"_renderCard",value:function(e){this._getCardElement(),this.isLiked(e)&&this._cardElement.querySelector(".place__button-like").classList.add("place__button-like_active");var t=this._cardElement.querySelector(".place__image");t.src=this._link,t.alt=this._name,this._cardElement.querySelector(".place__text").textContent=this._name,this._likeCounter=this._cardElement.querySelector(".place__like-counter"),this._likeCounter.textContent=this._likes.length}},{key:"_setEventListener",value:function(){var e=this;this._cardElement.querySelector(".place__button-like").addEventListener("click",(function(t){e._handleLikeClick(t)})),this._cardElement.querySelector(".place__button-delete").addEventListener("click",(function(t){e._handleDeleteClick(t.target)})),this._cardElement.querySelector(".place__image").addEventListener("click",(function(){e._handleCardClick(e._link,e._name)}))}},{key:"isLiked",value:function(e){var t=!1;return this._likes.some((function(n){return t=n._id===e})),t}},{key:"renewLikeCounter",value:function(e){this._likes=e,this._likeCounter.textContent=e.length}},{key:"createCard",value:function(e){return this._renderCard(e),this._setEventListener(),e!=this._ownerId&&this._cardElement.querySelector(".place__button-delete").remove(),this._cardElement}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var y=function(){function e(t,n){var r=t.data,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderedItems=r,this._container=document.querySelector(n),this._renderer=o}var t,n;return t=e,(n=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"renderItems",value:function(){var e=this;this._renderedItems.forEach((function(t){e._renderer(t)}))}}])&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function _(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var v=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._selector=t,this._popup=document.querySelector(this._selector),this._handleEscListener=function(e){"Escape"===e.key&&this.close()},this._handleEscListener=this._handleEscListener.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscListener)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscListener)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__button_type_exit"))&&e.close()}))}}])&&_(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function k(){return k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=g(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},k.apply(this,arguments)}function g(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}function w(e,t){return w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},w(e,t)}function E(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var C=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&w(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imageLink=t._popup.querySelector(".popup__image"),t._altText=t._popup.querySelector(".popup__image"),t._caprion=t._popup.querySelector(".popup__caption"),t}return t=a,(n=[{key:"open",value:function(e,t){k(S(a.prototype),"open",this).call(this),this._imageLink.src=e,this._altText.alt=t,this._caprion.textContent=t}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(v);function L(e){return L="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},L(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function j(){return j="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=P(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},j.apply(this,arguments)}function P(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}function q(e,t){return q=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},q(e,t)}function I(e,t){if(t&&("object"===L(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function R(e){return R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},R(e)}var T=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&q(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(r);if(o){var n=R(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return I(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._handleSubmitForm=e,n._inputs=Array.from(n._popup.querySelectorAll(".popup__item")),n._form=n._popup.querySelector(".popup__wrapper"),n}return t=a,(n=[{key:"getInputValues",value:function(){this._inputsValues=this._inputs.map((function(e){return e.value}))}},{key:"close",value:function(){j(R(a.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;j(R(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){e._handleSubmitForm(t),e.close()}))}}])&&O(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(v);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var x=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._about=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._user={name:this._name.textContent,about:this._about.textContent},this._user}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about,r=e.id;this._name.textContent=t,this._about.textContent=n,this.id=r}},{key:"setUserAvatar",value:function(e){this._avatar.src=e}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function D(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var V=function(){function e(t,n){var r=n.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl=t,this.headers=r}var t,n;return t=e,(n=[{key:"getCards",value:function(){return fetch("".concat(this.baseUrl,"/cards"),{headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"getUserData",value:function(){return fetch("".concat(this.baseUrl,"/users/me"),{headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"postUserData",value:function(e,t){return fetch("".concat(this.baseUrl,"/users/me"),{headers:this.headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"postUserPhoto",value:function(e){return fetch("".concat(this.baseUrl,"/users/me/avatar"),{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"postCard",value:function(e,t){return fetch("".concat(this.baseUrl,"/cards"),{headers:this.headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"putLike",value:function(e){return fetch("".concat(this.baseUrl,"/cards/").concat(e,"/likes"),{headers:this.headers,method:"PUT"}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteLike",value:function(e){return fetch("".concat(this.baseUrl,"/cards/").concat(e,"/likes"),{headers:this.headers,method:"DELETE"}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}},{key:"deleteCard",value:function(e){return fetch("".concat(this.baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this.headers}).then((function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}))}}])&&D(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function F(){return F="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=N(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},F.apply(this,arguments)}function N(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=M(e)););return e}function J(e,t){return J=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},J(e,t)}function H(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function M(e){return M=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},M(e)}var z=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&J(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=M(r);if(o){var n=M(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return H(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._handleSubmitForm=e,n}return t=a,(n=[{key:"setEventListeners",value:function(){var e=this;F(M(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){e._handleSubmitForm(t,e._id,e._target),e.close()}))}},{key:"setId",value:function(e,t){this._id=e,this._target=t}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(v);function $(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var G=new V("https://mesto.nomoreparties.co/v1/cohort-41",{headers:{authorization:"420a86b4-7133-4ca0-90cf-bb2cdda2a90c","Content-Type":"application/json"}}),K=new x(".profile__title",".profile__subtitle",".profile__avatar");function Q(e,t){var n=document.querySelector(e);t?n.classList.add("loader_visible"):n.classList.remove("loader_visible")}function W(e,t){var n=document.querySelector(e);t?n.classList.add("content_visible"):n.classList.remove("content_visible")}Q(".content-loader",!0),W(".content",!1),Promise.all([G.getUserData(),G.getCards()]).then((function(e){var t,n,r,o=(r=2,function(e){if(Array.isArray(e))return e}(n=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(n,r)||function(e,t){if(e){if("string"==typeof e)return $(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=o[0],a=o[1];K.setUserInfo({name:i.name,about:i.about,id:i._id}),K.setUserAvatar(i.avatar),(t=new y({data:a,renderer:function(e){var n=Y(e);t.addItem(n)}},".places")).renderItems()})).catch((function(e){console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".content-loader",!1),W(".content",!0)}));var X=new z((function(e,t,n){e.preventDefault(),Q(".popup-confirm__loader",!0),G.deleteCard(t).then((function(){n.closest(".place").remove()})).catch((function(e){console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".popup-confirm__loader",!1)}))}),".popup-confirm");function Y(e){var t=new d({card:e,handleCardClick:function(e,t){ne.open(e,t)},handleLikeClick:function(e){var n=e.target;t.isLiked(K.id)?G.deleteLike(t.id).then((function(e){n.classList.remove("place__button-like_active"),t.renewLikeCounter(e.likes)})).catch((function(e){return console.log("Что-то не так. ".concat(e))})):G.putLike(t.id).then((function(e){n.classList.add("place__button-like_active"),t.renewLikeCounter(e.likes)})).catch((function(e){return console.log("Что-то не так. ".concat(e))}))},handleDeleteClick:function(e){X.setId(t.id,e),X.open()}},".card_template");return t.createCard(K.id)}X.setEventListeners();var Z=new T((function(e){e.preventDefault(),Q(".popup-edit__loader",!0),Z.getInputValues();var t={name:Z._inputsValues[0],about:Z._inputsValues[1]};G.postUserData(t.name,t.about).then((function(){K.setUserInfo(t)})).catch((function(e){return console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".popup-edit__loader",!1)}))}),".popup-edit");Z.setEventListeners(),i.addEventListener("click",(function(){var e=K.getUserInfo(),t=e.name,n=e.about;r.value=t,o.value=n,Z.open()}));var ee=new T((function(e){e.preventDefault(),Q(".popup-add__loader",!0),ee.getInputValues();var t={name:ee._inputsValues[0],link:ee._inputsValues[1],likes:[],owner:{_id:K.id},id:""};G.postCard(t.name,t.link).then((function(e){var t=Y(e);u.prepend(t)})).catch((function(e){return console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".popup-add__loader",!1)}))}),".popup-add");ee.setEventListeners(),a.addEventListener("click",(function(){re.resetValidation(),ee.open()}));var te=new T((function(e){e.preventDefault(),Q(".loader-profile",!0),te.getInputValues();var t=te._inputsValues[0];G.postUserPhoto(t).then((function(){document.querySelector(".profile__avatar").src=t})).catch((function(e){return console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".loader-profile",!1)}))}),".popup-update-avatar");te.setEventListeners(),c.addEventListener("click",(function(){oe.resetValidation(),te.open()}));var ne=new C(".popup-photo");ne.setEventListeners();var re=new f(s,t);re.enableValidation(),new f(s,e).enableValidation();var oe=new f(s,n);oe.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,