(()=>{"use strict";document.querySelector(".popup-edit"),document.querySelector(".popup-add"),document.querySelector(".popup-photo");var e=document.querySelector(".edit-form"),t=document.querySelector(".add-form"),n=document.querySelector(".update-avatar-form"),r=document.querySelector(".popup__item_el_title"),o=document.querySelector(".popup__item_el_subtitle"),i=document.querySelector(".profile__edit-button"),a=document.querySelector(".profile__add-button"),c=document.querySelector(".profile__edit-avatar"),u=(document.querySelector(".places"),{inputElement:".popup__item",submitButtonSelector:".popup__button_type_save",inactiveButtonClass:"popup__button_type_disabled",inputErrorClass:"popup__item_type_wrong",spanErrorClass:"popup__span-error_active"});function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._formElement=n,this._inputList=Array.from(this._formElement.querySelectorAll(t.inputElement)),this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._spanErrorClass=t.spanErrorClass}var t,n;return t=e,(n=[{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_showError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),t.classList.add(this._spanErrorClass),t.textContent=e.validationMessage}},{key:"_hideError",value:function(e){var t=this._formElement.querySelector(".".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._spanErrorClass),t.textContent=""}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideError(e):this._showError(e)}},{key:"_toggleButton",value:function(){var e=this._formElement.querySelector(this._submitButtonSelector);this._hasInvalidInput()?(e.classList.add(this._inactiveButtonClass),e.setAttribute("disabled","disabled")):(e.classList.remove(this._inactiveButtonClass),e.removeAttribute("disabled"))}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(t){e._checkInputValidity(t.target),e._toggleButton(t.target)}))}))}},{key:"enableValidation",value:function(){this._setEventListeners()}},{key:"resetValidation",value:function(){var e=this;this._toggleButton(),this._inputList.forEach((function(t){e._hideError(t)}))}}])&&s(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function f(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t,n){var r=t.card,o=t.handleCardClick,i=t.handleLikeClick,a=t.handleDeleteClick;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=r.name,this._link=r.link,this._likes=r.likes,this._handleCardClick=o,this._handleLikeClick=i,this._handleDeleteClick=a,this._templateSelector=n,this._ownerId=r.owner._id,this.id=r._id}var t,n;return t=e,(n=[{key:"_getCardElement",value:function(){this._cardElement=document.querySelector(this._templateSelector).content.querySelector(".place").cloneNode(!0),this._buttonLike=this._cardElement.querySelector(".place__button-like")}},{key:"_renderCard",value:function(e){this._getCardElement(),this.isLiked(e)&&this.setLike();var t=this._cardElement.querySelector(".place__image");t.src=this._link,t.alt=this._name,this._cardElement.querySelector(".place__text").textContent=this._name,this._likeCounter=this._cardElement.querySelector(".place__like-counter"),this._likeCounter.textContent=this._likes.length}},{key:"_setEventListener",value:function(){var e=this;this._buttonLike.addEventListener("click",(function(t){e._handleLikeClick(t)})),this._cardElement.querySelector(".place__button-delete").addEventListener("click",(function(t){e._handleDeleteClick(t.target)})),this._cardElement.querySelector(".place__image").addEventListener("click",(function(){e._handleCardClick(e._link,e._name)}))}},{key:"setLike",value:function(){this._buttonLike.classList.add("place__button-like_active")}},{key:"removeLike",value:function(){this._buttonLike.classList.remove("place__button-like_active")}},{key:"isLiked",value:function(e){var t=!1;return this._likes.some((function(n){return t=n._id===e})),t}},{key:"renewLikeCounter",value:function(e){this._likes=e,this._likeCounter.textContent=e.length}},{key:"deleteCard",value:function(){this._cardElement.remove()}},{key:"createCard",value:function(e){return this._renderCard(e),this._setEventListener(),e!=this._ownerId&&this._cardElement.querySelector(".place__button-delete").remove(),this._cardElement}}])&&f(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._container=document.querySelector(n),this._renderer=t}var t,n;return t=e,n=[{key:"addItem",value:function(e){this._container.append(e)}},{key:"renderNewElement",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}}],n&&h(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var _=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._selector=t,this._popup=document.querySelector(this._selector),this._handleEscListener=function(e){"Escape"===e.key&&this.close()},this._handleEscListener=this._handleEscListener.bind(this)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscListener)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscListener)}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("mousedown",(function(t){(t.target.classList.contains("popup_opened")||t.target.classList.contains("popup__button_type_exit"))&&e.close()}))}}])&&y(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function v(e){return v="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},v(e)}function b(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function m(){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},m.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=g(e)););return e}function w(e,t){return w=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},w(e,t)}function E(e,t){if(t&&("object"===v(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function g(e){return g=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},g(e)}var L=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&w(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=g(r);if(o){var n=g(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._imageLink=t._popup.querySelector(".popup__image"),t._caprion=t._popup.querySelector(".popup__caption"),t}return t=a,(n=[{key:"open",value:function(e,t){m(g(a.prototype),"open",this).call(this),this._imageLink.src=e,this._imageLink.alt=t,this._caprion.textContent=t}}])&&b(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(_);function C(e){return C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},C(e)}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function O(){return O="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=j(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},O.apply(this,arguments)}function j(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=R(e)););return e}function P(e,t){return P=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},P(e,t)}function q(e,t){if(t&&("object"===C(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function R(e){return R=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},R(e)}var I=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&P(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=R(r);if(o){var n=R(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return q(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._handleSubmitForm=e,n._inputs=Array.from(n._popup.querySelectorAll(".popup__item")),n._form=n._popup.querySelector(".popup__wrapper"),n}return t=a,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValues={},this._inputs.forEach((function(t){e._formValues[t.name]=t.value})),this._formValues}},{key:"close",value:function(){O(R(a.prototype),"close",this).call(this),this._form.reset()}},{key:"setEventListeners",value:function(){var e=this;O(R(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){e._handleSubmitForm(t,e._getInputValues())}))}}])&&S(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(_);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var T=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t),this._about=document.querySelector(n),this._avatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._user={name:this._name.textContent,about:this._about.textContent},this._user}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.about,r=e.id;this._name.textContent=t,this._about.textContent=n,this.id=r}},{key:"setUserAvatar",value:function(e){this._avatar.src=e}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function x(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var D=function(){function e(t,n){var r=n.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl=t,this.headers=r}var t,n;return t=e,(n=[{key:"_checkRes",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getCards",value:function(){var e=this;return fetch("".concat(this.baseUrl,"/cards"),{headers:this.headers}).then((function(t){return e._checkRes(t)}))}},{key:"getUserData",value:function(){var e=this;return fetch("".concat(this.baseUrl,"/users/me"),{headers:this.headers}).then((function(t){return e._checkRes(t)}))}},{key:"postUserData",value:function(e,t){var n=this;return fetch("".concat(this.baseUrl,"/users/me"),{headers:this.headers,method:"PATCH",body:JSON.stringify({name:e,about:t})}).then((function(e){return n._checkRes(e)}))}},{key:"postUserPhoto",value:function(e){var t=this;return fetch("".concat(this.baseUrl,"/users/me/avatar"),{headers:this.headers,method:"PATCH",body:JSON.stringify({avatar:e})}).then((function(e){return t._checkRes(e)}))}},{key:"postCard",value:function(e,t){var n=this;return fetch("".concat(this.baseUrl,"/cards"),{headers:this.headers,method:"POST",body:JSON.stringify({name:e,link:t})}).then((function(e){return n._checkRes(e)}))}},{key:"putLike",value:function(e){var t=this;return fetch("".concat(this.baseUrl,"/cards/").concat(e,"/likes"),{headers:this.headers,method:"PUT"}).then((function(e){return t._checkRes(e)}))}},{key:"deleteLike",value:function(e){var t=this;return fetch("".concat(this.baseUrl,"/cards/").concat(e,"/likes"),{headers:this.headers,method:"DELETE"}).then((function(e){return t._checkRes(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this.baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this.headers}).then((function(e){return t._checkRes(e)}))}}])&&x(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function B(e){return B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},B(e)}function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function V(){return V="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=N(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},V.apply(this,arguments)}function N(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=H(e)););return e}function F(e,t){return F=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},F(e,t)}function J(e,t){if(t&&("object"===B(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function H(e){return H=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},H(e)}var M=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&F(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=H(r);if(o){var n=H(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return J(this,e)});function a(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(n=i.call(this,t))._handleSubmitForm=e,n.button=document.querySelector(".popup-confirm__save"),n}return t=a,(n=[{key:"open",value:function(){this.button.textContent="Да",V(H(a.prototype),"open",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;V(H(a.prototype),"setEventListeners",this).call(this),this._popup.addEventListener("submit",(function(t){e._handleSubmitForm(t,e._id,e._target)}))}},{key:"setId",value:function(e){this._id=e.id,this.currentCard=e}}])&&A(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),a}(_);function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var $=new D("https://mesto.nomoreparties.co/v1/cohort-41",{headers:{authorization:"420a86b4-7133-4ca0-90cf-bb2cdda2a90c","Content-Type":"application/json"}}),G=new T(".profile__title",".profile__subtitle",".profile__avatar");function K(e,t){document.querySelector(e).textContent=t?"Сохранение...":"Сохранить"}function Q(e,t){var n=document.querySelector(e);t?n.classList.add("content-loader_visible"):n.classList.remove("content-loader_visible")}function W(e,t){var n=document.querySelector(e);t?n.classList.add("content_visible"):n.classList.remove("content_visible")}var X=new d((function(e){var t=Z(e);X.addItem(t)}),".places");Q(".content-loader",!0),W(".content",!1),Promise.all([$.getUserData(),$.getCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],a=!0,c=!1;try{for(n=n.call(e);!(a=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);a=!0);}catch(e){c=!0,o=e}finally{try{a||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];G.setUserInfo({name:o.name,about:o.about,id:o._id}),G.setUserAvatar(o.avatar),X.renderItems(i)})).catch((function(e){console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".content-loader",!1),W(".content",!0)}));var Y=new M((function(e,t){e.preventDefault(),K(".popup-confirm__save",!0),$.deleteCard(t).then((function(){Y.currentCard.deleteCard(),Y.close()})).catch((function(e){console.log("Что-то не так. ".concat(e))})).finally((function(){K(".popup-confirm__save",!1)}))}),".popup-confirm");function Z(e){var t=new p({card:e,handleCardClick:function(e,t){re.open(e,t)},handleLikeClick:function(){t.isLiked(G.id)?$.deleteLike(t.id).then((function(e){t.removeLike(),t.renewLikeCounter(e.likes)})).catch((function(e){return console.log("Что-то не так. ".concat(e))})):$.putLike(t.id).then((function(e){t.setLike(),t.renewLikeCounter(e.likes)})).catch((function(e){return console.log("Что-то не так. ".concat(e))}))},handleDeleteClick:function(){Y.setId(t),Y.open()}},".card_template");return t.createCard(G.id)}Y.setEventListeners();var ee=new I((function(e,t){e.preventDefault(),K(".popup-edit__save",!0);var n={name:t.popup_title,about:t.popup_sutitle};$.postUserData(n.name,n.about).then((function(){G.setUserInfo(n),ee.close()})).catch((function(e){return console.log("Что-то не так. ".concat(e))})).finally((function(){Q(".popup-edit__save",!1)}))}),".popup-edit");ee.setEventListeners(),i.addEventListener("click",(function(){var e=G.getUserInfo(),t=e.name,n=e.about;r.value=t,o.value=n,K(".popup-edit__save",!1),ee.open()}));var te=new I((function(e,t){e.preventDefault(),K(".popup-add__save",!0);var n={name:t.popup_title,link:t.popup_sutitle,likes:[],owner:{_id:G.id},id:""};$.postCard(n.name,n.link).then((function(e){var t=Z(e);X.renderNewElement(t),te.close()})).catch((function(e){return console.log("Что-то не так. ".concat(e))})).finally((function(){K(".popup-add__save",!1)}))}),".popup-add");te.setEventListeners(),a.addEventListener("click",(function(){oe.resetValidation(),te.open()}));var ne=new I((function(e,t){e.preventDefault(),K(".update-avatar-form__save",!0);var n=t.inputAvatarLink;$.postUserPhoto(n).then((function(){document.querySelector(".profile__avatar").src=n,ne.close()})).catch((function(e){return console.log("Что-то не так. ".concat(e))})).finally((function(){K(".update-avatar-form__save",!1)}))}),".popup-update-avatar");ne.setEventListeners(),c.addEventListener("click",(function(){ie.resetValidation(),ne.open()}));var re=new L(".popup-photo");re.setEventListeners();var oe=new l(u,t);oe.enableValidation(),new l(u,e).enableValidation();var ie=new l(u,n);ie.enableValidation()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,